---
title: "Election Day Graphics (Hurley)"
format: html
editor: visual
---

## Magic Number Histogram

```{r, fig.width=8, fig.height=4.5}
library(tidyverse)

# Define constants

#total_votes <- 448859.  #Actual number of total ballots (projected)
total_votes <- 1000   #Smaller number so simulation actually finishes
percentages <- c(0.313, 0.044, 0.6426)  # Votes distribution

# Calculate the number of votes
no_votes <- round(total_votes * percentages[1])  # No votes
one_vote <- round(total_votes * percentages[2])  # Votes for one candidate
two_votes <- round(total_votes * percentages[3])  # Votes for two candidates

# Define candidates
candidates <- c("A", "B", "C", "D", "E")

# Function to simulate the election
simulate_election <- function(candidates, one_vote, two_votes) {
  # Create a ballot list
  ballots <- vector("list", total_votes)
  
  # Assign ballots for no votes
  for (i in 1:no_votes) {
    ballots[[i]] <- c()  # No votes
  }
  
  # Assign ballots for one candidate
  for (i in (no_votes + 1):(no_votes + one_vote)) {
    ballots[[i]] <- sample(candidates, 1)  # Vote for one candidate
  }
  
  # Assign ballots for two candidates
  for (i in (no_votes + one_vote + 1):total_votes) {
    ballots[[i]] <- sample(candidates, 2)  # Vote for two candidates
  }
  
  # Count votes for each candidate
  vote_counts <- table(unlist(ballots))
  return(as.numeric(vote_counts))
}

# Store results
results <- replicate(1000, simulate_election(candidates, one_vote, two_votes))

# Convert results to a data frame
results_df <- as.data.frame(t(results))
colnames(results_df) <- candidates

# Determine winners (top 2 candidates)
results_df$Election <- 1:nrow(results_df)
results_df$Winner1 <- apply(results_df[, 1:5], 1, function(x) names(sort(x, decreasing = TRUE)[1]))
results_df$Winner2 <- apply(results_df[, 1:5], 1, function(x) names(sort(x, decreasing = TRUE)[2]))
results_df$MagicNumber <- apply(results_df[, 1:5], 1, function(x) (sort(x, decreasing = TRUE)[3]+1)/total_votes)

# Display results
head(results_df)

# Summary of winning candidates
winner_summary <- table(results_df$Winner1, results_df$Winner2)
winner_summary

magic_number_average <- mean(results_df$MagicNumber)
needed_votes <- magic_number_average*448859
needed_votes


# Calculate the mean
mean_value <- mean(results_df$MagicNumber, na.rm = TRUE)

# Create the histogram
hist(
  results_df$MagicNumber, 
  main = "Percentage of Votes Needed to Win Field Race", 
  xlab = "Magic Number Percentage",
  ylab = "Number of Simulations",
  col = "grey", 
  border = "black",
  breaks = 25,
  cex.main = 1.75,
  cex.lab = 1.25
)

# Add a vertical line for the mean
abline(v = mean_value, col = "black", lwd = 2)


# Add text for the mean
text(x = mean_value + 0.008, y = 80, 
     labels = paste("Mean:", round(mean_value*100, 2),"%"), 
     col = "black", cex = 2) 

```

## Mail-In Voter Age Distribution

```{r, fig.width=8, fig.height=4.5}
library(tidyverse)
library(ggplot2)
library(scales)

Mail_in_2024 <- read_csv("/Users/redfi/Documents/R Stuff/Election Maps/AbsenteeListExport-2024.csv")
Registered_voters <- read_csv("/Users/redfi/Documents/R Stuff/Election Maps/VoterListExport-20241024-no.csv")

# Computing age on election day
Mail_in_2024 <- Mail_in_2024 %>%
  mutate(Age = abs(BirthYear - 2024)) %>% 
  filter(Age <= 100)

Registered_voters <- Registered_voters %>%
  mutate(Age = abs(BirthYear - 2024)) %>% 
  filter(Age <= 100)

# Count occurrences of each age
Registered_voters_counts <- Registered_voters %>%
  group_by(Age) %>%
  summarise(count = n()) %>%
  mutate(mtype = 'Registered Voters')

Mail_in_2024_counts <- Mail_in_2024 %>%
  group_by(Age) %>%
  summarise(count = n()) %>%
  mutate(mtype = 'Mail Voters')

# Combine the datasets
combined_counts <- rbind(Registered_voters_counts, Mail_in_2024_counts)

# Calculate total counts for percentages
total_registered <- sum(Registered_voters_counts$count)
total_mail <- sum(Mail_in_2024_counts$count)

# Calculate percentages
combined_counts <- combined_counts %>%
  mutate(percentage = case_when(
    mtype == 'Registered Voters' ~ count / total_registered,
    mtype == 'Mail Voters' ~ count / total_mail
  ))

# Custom colors
custom_colors <- c("Registered Voters" = "black", "Mail Voters" = "red") 

# Plot with percentage formatting
ggplot(combined_counts, aes(x = Age, y = percentage, color = mtype)) +
  geom_line(size = 1.25) +
  # geom_point() +
  scale_color_manual(values = custom_colors) +
  scale_y_continuous(
    name = "Percentage of Registered Voters",
    labels = label_percent(scale = 100),  # Format left y-axis
    sec.axis = sec_axis(
      trans = ~ ., 
      name = "Percentage of Mail-in Voters", 
      labels = label_percent(scale = 100)  # Format right y-axis
    )
  ) +
  labs(title = "Mail-in Voter Age Distribution",
       x = "Age",
       color = "Voter Type") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 24),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16, color = "black"),  
    axis.text.y = element_text(color = "black"),
    axis.title.y.right = element_text(size = 16, color = "red"),  
    axis.text.y.right = element_text(color = "red"),  
    legend.title = element_text(size = 20),
    legend.text  = element_text(size = 16)
  )

```
